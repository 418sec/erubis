$ [ANN] Erubis 2.1.0 release - a fast eRuby implementation

I have released Erubis 2.1.0.
http://rubyforge.org/projects/erubis/

Erubis is a pure ruby implementation of eRuby.

Features:
  * Very fast, almost three times faster than ERB and
    even as fast as eruby (implemented in C)
  * Support multi-language
    (Ruby,PHP,C,Java,Scheme,Perl,Javascript)
  * Auto escaping support
  * Auto trimming spaces around '<% %>'
  * Embedded pattern changeable (default '<% %>')
  * Context object available and easy to combine eRuby
    template with YAML datafile
  * Print statement available
  * Easy to extend in subclass

See users' guide (erubis_2.1.0/doc/users-guide.html)
for details.


Enhancements from 2.0:

  * Ruby on Rails support. Add the following code to
    your 'app/controllers/application.rb' and restart web server.

    --------------------
    require 'erubis/helper/rails'
    suffix = 'erubis' 
    ActionView::Base.register_template_handler(suffix, Erubis::Helper::RailsTemplate)
    #Erubis::Helper::RailsTemplate.engine_class = Erubis::EscapedEruby ## or Erubis::PI::Eruby
    #Erubis::Helper::RailsTemplate.default_properties = { :escape=>true, :escapefunc=>'h' }
    --------------------

    And rename your view template as 'xxx.erubis'.
    If you got the "(eval):10:in `render': no block given" error,
    use '@content_for_layout' instead 'yield' in your layout template.
 
  * Another eRuby engine (PIEngine) support. This engine doesn't
    break HTML design because it uses Processing Instructions (PI)
    '<?rb .. ?>' as embedded pattern instead of '<% .. %>'.
 
    example.rhtml
    --------------------
    <table>
    <?rb @list.each_with_index do |item, i| ?>
    <?rb   klass = i % 2 == 0 ? 'odd' : 'even' ?>
      <tr class="@{klass}@">
        <td>@!{item}@</td>
      </tr>
    <?rb end ?>
    </table>
    --------------------
 
    compile:
    ====================
    $ erubis -x --pi example.rhtml
    _buf = []; _buf << '<table>
    '; @list.each_with_index do |item, i| 
       klass = i % 2 == 0 ? 'odd' : 'even' 
     _buf << '  <tr class="'; _buf << Erubis::XmlHelper.escape_xml(klass); _buf << '">
        <td>'; _buf << (item).to_s; _buf << '</td>
      </tr>
    '; end 
     _buf << '</table>
    ';
    _buf.join
    ====================
 
  * Add new command 'notext' which remove text part from eRuby
    script and leaves only Ruby code.
    This is very useful when debugging eRuby script.
 
    example2.rhtml
    --------------------
    <html>
     <body>
      <table>
    <% @list.each_with_index do |item, i| %>
    <%   klass = i % 2 == 0 ? 'odd' : 'even' %>
       <tr class="<%= klass %>">
        <td><%== item %></td>
       </tr>
    <% end %>
      </table>
     </body>
    </html>
    --------------------
 
    command line example:
    ====================
    $ notext example2.rhtml
    _buf = [];
    
    
     @list.each_with_index do |item, i| ;
       klass = i % 2 == 0 ? 'odd' : 'even' ;
                   _buf << ( klass ).to_s;
             _buf << Erubis::XmlHelper.escape_xml( item );
    
     end ;
    
    
    
    _buf.join
    $ notext -nc example2.rhtml
      1: _buf = [];
      4:  @list.each_with_index do |item, i| ;
      5:    klass = i % 2 == 0 ? 'odd' : 'even' ;
      6:                _buf << ( klass ).to_s;
      7:          _buf << Erubis::XmlHelper.escape_xml( item );
      9:  end ;
     13: _buf.join
    ====================
 
  * Add new enhance 'NoCode' which removes ruby code from
    eRuby script and leaves only HTML text part.
    It is very useful to validate HTML of eRuby script.
 
    command-line example:
    ====================
    $ erubis -x -E NoCode example2.rhtml
    <html>
     <body>
      <table>
    
    
       <tr class="">
        <td></td>
       </tr>
    
      </table>
     </body>
    </html>
    ====================


Changes from 2.0:
 
  * License is changed to LGPL.

  * Command-line property '--escape=name' is renamed to
    '--escapefunc=name'.
 
  * When command-line option '-l perl' is specified, function
   'encode_entities()' is used ad escaping function which is
   available wth HTML::Entities module.


Bugfix:
  * There is a certain pattern which makes Engine#convert()
    too slow. Now Engne#convert() is fixed not to be slown.
  * Command name is now displayed when '-h' is specified.


Have fun!

--
kwa


$ [ANN] Erubis 2.0.1 release - a fast eRuby implementation

I have released Erubis 2.0.0.
http://rubyforge.org/projects/erubis/

Erubis is a pure ruby implementation of eRuby.

This is a minor bugfix version.



$ [ANN] Erubis 2.0.0 release - a fast eRuby implementation

I have released Erubis 2.0.0.
http://rubyforge.org/projects/erubis/

Erubis is a pure ruby implementation of eRuby.

Features:
 * Very fast, almost three times faster than ERB and
   even as fast as eruby (implemented in C)
 * Support multi-language
   (Ruby,PHP,C,Java,Scheme,Perl,Javascript)
 * Auto escaping support
 * Auto trimming spaces around '<% %>'
 * Embedded pattern changeable (default '<% %>')
 * Context object available and easy to combine eRuby
   template with YAML datafile
 * Print statement available
 * Easy to extend in subclass

See users' guide (erubis_2.0.0/doc/users-guide.html)
for details.


Changes from 1.1:
 * module 'PrintEnhancer' is renamed to 'PrintEnabledEnahncer'
 * module 'FastEnhancer' and class 'FastEruby' is obsolete
   (these are integrated with Eruby class)
 * Eruby#evaluate() calls instance_eval() instead of eval()
 * XmlEruby.escape_xml() is moved to XmlHelper.escape_xml()
 * and so on

Enhancements from 1.1:
 * multi programming language support
   (Ruby,PHP,C,Java,Scheme,Perl,Javascript)
 * many enhancer modules are added (see users' guide for details)
 * class Eruby runs very fast because FastEnhancer module is
   integrated into Eruby by default
 * TinyEruby class (tiny.rb) is added
 * and so on
 

If you are interested in Eruby internal, see the following classes
at first.
 * Erubis::TinyEruby (erubis/tiny.rb) --
       the most simple eRuby implementation.
 * Erubis::Engine (erubis/engine.rb) --
       base class of Eruby, Ephp, Ejava, and so on.
 * Erubis::Eruby (erubis/engine/eruby.rb) --
       engine class for eRuby.


--
regards,
kwatch





$ Release 1.1.1 (2006-03-06)

I have released Erubis 1.1.0.
http://rubyforge.org/projects/erubis/

Erubis is an implementation of eRuby.
It has the following features:

* Auto sanitizing support
* Auto trimming spaces around '<% %>'
* Embedded pattern changeable (default '<% %>')
* Context object available
* Print statement available
* Faster mode support
* Easy to expand in subclass

Erubis is implemented in pure Ruby.  It requires Ruby 1.8 or higher.

See doc/users-guide.html in archive for details.


: Enhancement from 1.1.0

  * New command-line option '-x' supported.
    This option prints Ruby source code of eRuby script coverted
    and remove the last '_out' line.
    This is more convenient than '-s' when validating with 'ruby -wc'.

    example:
    ====================
    $ cat foo.eruby
    <% (1..3).each do |i| %>
     i = <%= i %>
    <% end %>

    $ eruby -x foo.eruby
    _out = '';  (1..3).each do |i| 
    _out << " i = "; _out << ( i ).to_s; _out << "¡Àn"
     end
    $ eruby -x foo.eruby | ruby -wc
    Syntax OK

    $ eruby -s foo.eruby
    _out = '';  (1..3).each do |i| 
    _out << " i = "; _out << ( i ).to_s; _out << "¡Àn"
     end
    _out
    $ erubis -s foo.rhtml | ruby -wc
    -:4: warning: useless use of a variable in void context
    Syntax OK
    ====================


$ Release 1.1.0 (2006-03-05)

I have released Erubis 1.1.0.
http://rubyforge.org/projects/erubis/

Erubis is an implementation of eRuby.
It has the following features:

* Auto sanitizing support
* Embedded pattern changeable (default '<% %>')
* Auto trimming spaces around '<% %>'
* Context object available
* Print statement available
* Faster mode support
* Easy to expand in subclass

Erubis is implemented in pure Ruby.  It requires Ruby 1.8 or higher.

Sample code (example.rb):
--------------------
## eRuby script
## ('<%= %>' is escaped and '<%== %>' is not escaped when using XmlEruby class)
input = <<END
<ul>
  <% for item in list %>
  <li><%= item %>
      <%== item %></li>
  <% end %>
</ul>
END

## create Eruby object
require 'erubis'
eruby = Erubis::XmlEruby.new(input)     # or Erubis::Eruby.new(input)

## get result
list = ['<aaa>', 'b&b', '"ccc"']
puts eruby.result(binding())
--------------------

result:
====================
$ ruby example.rb
<ul>
  <li>&lt;aaa&gt;
      <aaa></li>
  <li>b&amp;b
      b&b</li>
  <li>&quot;ccc&quot;
      "ccc"</li>
</ul>
====================

See doc/users-guide.html in archive for details.


: Enhancement from 1.0.1

  * '<%# .. %>' supported.  Erubis ignores '<%#  %>'.
  
  * New class PrintEruby and PrintXmlEruby available.
    These class enables you to embed print statement in eRuby
    (this feature is not supported in ERB).
  
    ex.  example.eb
    --------------------
    ## data
    list = ['aaa', 'bbb', 'ccc']
    context = { :list => list }
  
    ## eRuby script
    ## (use print statement instead of <%= item %>)
    input = <<-END
    <ul>
     <% for item in list %>
      <li><% print item %></li> 
     <% end %>
    </ul>
    END
  
    ## create eruby and get result as string
    require 'erubis'
    eruby = Erubis::PrintEruby.new(input)
    str = eruby.evaluate(context)    # don't use result()!
    print str
    --------------------
  
    result:
    ====================
    $ ruby example.rb
    <ul>
      <li>aaa</li>
      <li>bbb</li>
      <li>ccc</li>
    </ul>
    ====================
  
Have fun!

--
regards,
kwatch
